name: Auto Commit
on:
  schedule:
    - cron: '0 */2 * * *'  # Runs every 2 hours
  workflow_dispatch:        # Allows manual triggering
jobs:
  stochastic-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Generate random commits
        run: |
          python -c "
import random
import datetime
import os
import time
          
today = datetime.datetime.now().strftime('%Y-%m-%d')
quota_file = 'commit_quota.txt'
if not os.path.exists(quota_file):
    with open(quota_file, 'w') as f:
        f.write(f'{today}:0')
with open(quota_file, 'r') as f:
    content = f.read().strip()
    last_date, commits_made = content.split(':')
    commits_made = int(commits_made)
if last_date != today:
    commits_made = 0
    last_date = today
if commits_made == 0:  # First run of the day
    daily_target = random.randint(3, 10)
    print(f'Setting daily target to {daily_target} commits')
else:
    with open(quota_file, 'r') as f:
        first_line = f.readline().strip()
        if ':' in first_line and 'target:' in first_line:
            daily_target = int(first_line.split('target:')[1])
        else:
            daily_target = random.randint(3, 10)
            print(f'Target not found, setting to {daily_target} commits')
remaining = max(0, daily_target - commits_made)
print(f'Already made {commits_made} commits today, need {remaining} more to reach target of {daily_target}')
current_hour = datetime.datetime.now().hour
hours_left = max(1, 24 - current_hour) / 2  # Divide by 2 because we run every 2 hours
commits_per_run = max(1, round(remaining / hours_left)) if remaining > 0 else 0
commits_this_run = min(3, random.randint(max(1, commits_per_run - 1), commits_per_run + 1)) if remaining > 0 else 0
commits_this_run = min(remaining, commits_this_run)  # Don't exceed remaining commits
print(f'Will make {commits_this_run} commits in this run')
for i in range(commits_this_run):
    # Create a unique activity entry
    timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    random_data = random.randint(1000, 9999)
    
    # Update activity file with timestamp and random data
    with open('activity.txt', 'w') as f:
        f.write(f'Last updated: {timestamp} [ID:{random_data}]')
    
    # Create random commit message
    commit_types = ['chore', 'update', 'fix', 'docs', 'refactor', 'style']
    actions = ['update activity', 'refresh data', 'maintain status', 'sync timestamp', 'log activity']
    
    commit_type = random.choice(commit_types)
    action = random.choice(actions)
    
    commit_command = f'git add activity.txt && git commit -m \\\"{commit_type}: {action} {random_data}\\\"'
    os.system(commit_command)
    
    if i < commits_this_run - 1:  # Don't delay after the last commit
        delay = random.randint(30, 120)
        print(f'Waiting {delay} seconds before next commit...')
        time.sleep(delay)
new_count = commits_made + commits_this_run
with open(quota_file, 'w') as f:
    f.write(f'target:{daily_target}\\n{today}:{new_count}')
    
print(f'Updated commit count: {new_count}/{daily_target} for today')
          "
      
      - name: Push changes
        run: |
          git config user.name "Ishaan Verma"
          git config user.email "vermaishaan12345@gmail.com"
          git push https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }} HEAD:main

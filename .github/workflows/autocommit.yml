name: Auto Commit
on:
  schedule:
    - cron: '0 */2 * * *'  # Runs every 2 hours
  workflow_dispatch:        # Allows manual triggering
jobs:
  stochastic-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
      
      - name: Generate random commits
        shell: bash
        run: |
          # Get today's date in YYYY-MM-DD format
          TODAY=$(date '+%Y-%m-%d')
          QUOTA_FILE="commit_quota.txt"
          
          # Create quota file if it doesn't exist
          if [ ! -f "$QUOTA_FILE" ]; then
            echo "$TODAY:0" > "$QUOTA_FILE"
          fi
          
          # Read current quota
          LAST_DATE=$(head -n 1 "$QUOTA_FILE" | cut -d':' -f1)
          if [[ "$LAST_DATE" == *"target"* ]]; then
            # If first line contains target info
            DAILY_TARGET=$(head -n 1 "$QUOTA_FILE" | cut -d':' -f2)
            LAST_DATE=$(tail -n 1 "$QUOTA_FILE" | cut -d':' -f1)
            COMMITS_MADE=$(tail -n 1 "$QUOTA_FILE" | cut -d':' -f2)
          else
            # No target info yet
            LAST_DATE=$(cat "$QUOTA_FILE" | cut -d':' -f1)
            COMMITS_MADE=$(cat "$QUOTA_FILE" | cut -d':' -f2)
          fi
          
          # Reset counter if it's a new day
          if [ "$LAST_DATE" != "$TODAY" ]; then
            COMMITS_MADE=0
            LAST_DATE="$TODAY"
          fi
          
          # Determine daily target (3-10 commits)
          if [ "$COMMITS_MADE" -eq 0 ]; then
            # First run of the day - set a new target
            # Use nanoseconds from date to generate pseudo-random number
            RANDOM_SEED=$(date +%N)
            DAILY_TARGET=$(( 3 + RANDOM_SEED % 8 ))  # Range: 3-10
            echo "Setting daily target to $DAILY_TARGET commits"
          fi
          
          # Calculate remaining commits
          REMAINING=$(( DAILY_TARGET - COMMITS_MADE ))
          if [ "$REMAINING" -lt 0 ]; then
            REMAINING=0
          fi
          echo "Already made $COMMITS_MADE commits today, need $REMAINING more to reach target of $DAILY_TARGET"
          
          # Calculate how many commits to do in this run
          CURRENT_HOUR=$(date +%H)
          HOURS_LEFT=$(( (24 - CURRENT_HOUR) / 2 ))
          if [ "$HOURS_LEFT" -lt 1 ]; then
            HOURS_LEFT=1
          fi
          
          # Calculate average commits needed per run
          if [ "$REMAINING" -gt 0 ]; then
            COMMITS_PER_RUN=$(( (REMAINING + HOURS_LEFT - 1) / HOURS_LEFT ))  # Ceiling division
            if [ "$COMMITS_PER_RUN" -lt 1 ]; then
              COMMITS_PER_RUN=1
            fi
          else
            COMMITS_PER_RUN=0
          fi
          
          # Add some randomness (Â±1) to commits per run, but cap at 3
          RANDOM_SEED=$(date +%N)
          RANDOM_OFFSET=$(( (RANDOM_SEED % 3) - 1 ))  # Range: -1 to 1
          COMMITS_THIS_RUN=$(( COMMITS_PER_RUN + RANDOM_OFFSET ))
          
          # Ensure at least 1 commit if we have remaining commits
          if [ "$REMAINING" -gt 0 ] && [ "$COMMITS_THIS_RUN" -lt 1 ]; then
            COMMITS_THIS_RUN=1
          fi
          
          # Cap commits at 3 per run and don't exceed remaining
          if [ "$COMMITS_THIS_RUN" -gt 3 ]; then
            COMMITS_THIS_RUN=3
          fi
          if [ "$COMMITS_THIS_RUN" -gt "$REMAINING" ]; then
            COMMITS_THIS_RUN="$REMAINING"
          fi
          
          echo "Will make $COMMITS_THIS_RUN commits in this run"
          
          # Define arrays for commit messages
          COMMIT_TYPES=("chore" "update" "fix" "docs" "refactor" "style")
          ACTIONS=("update activity" "refresh data" "maintain status" "sync timestamp" "log activity")
          
          # Make the commits
          for (( i=1; i<=COMMITS_THIS_RUN; i++ ))
          do
            # Create timestamp with random data
            TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
            RANDOM_DATA=$(( 1000 + ($(date +%N) % 9000) ))  # Range: 1000-9999
            
            # Update activity file
            echo "Last updated: $TIMESTAMP [ID:$RANDOM_DATA]" > activity.txt
            
            # Create random commit message
            TYPE_INDEX=$(( $(date +%N) % ${#COMMIT_TYPES[@]} ))
            ACTION_INDEX=$(( $(date +%N) % ${#ACTIONS[@]} ))
            COMMIT_TYPE=${COMMIT_TYPES[$TYPE_INDEX]}
            ACTION=${ACTIONS[$ACTION_INDEX]}
            
            # Add and commit
            git add activity.txt
            git commit -m "$COMMIT_TYPE: $ACTION $RANDOM_DATA"
            
            # Add delay between commits (if not the last one)
            if [ "$i" -lt "$COMMITS_THIS_RUN" ]; then
              DELAY=$(( 30 + ($(date +%N) % 91) ))  # Range: 30-120 seconds
              echo "Waiting $DELAY seconds before next commit..."
              sleep "$DELAY"
            fi
          done
          
          # Update quota file
          NEW_COUNT=$(( COMMITS_MADE + COMMITS_THIS_RUN ))
          echo "target:$DAILY_TARGET" > "$QUOTA_FILE"
          echo "$TODAY:$NEW_COUNT" >> "$QUOTA_FILE"
          
          echo "Updated commit count: $NEW_COUNT/$DAILY_TARGET for today"
      
      - name: Push changes
        run: |
          git config user.name "Ishaan Verma"
          git config user.email "vermaishaan12345@gmail.com"
          git push https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }} HEAD:main
